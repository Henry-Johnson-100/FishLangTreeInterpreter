/*

fish to_bool

  >(x)>

  <(
    fin
    >(x)>
    >(True)>
    >(False)>
  )<



fish or

  >(x)>
  >(y)>

  <(
    fin
    >(x)>
    >(True)>
    >(to_bool >(y)>)>
  )<



fish and

  >(x)>
  >(y)>

  <(
    fin
    >(x)>
    >(to_bool >(y)>)>
    >(False)>
  )<



fish not

  >(x)>

  <(
    fin
    >(to_bool >(x)>)>
    >(False)>
    >(True)>
  )<






fish main

  >(main_arg)>
  >(
    _x_ <(
    not >(main_arg)>
    )<
  )>
  >(
    __x__ <(
    not >(_x_)>
    )<
  )>

  <(
    fin
    >(__x__)>
    >("That's right")>
    >("That's wrong")>
  )<

fish increment
  >(n)>
  <(+ >(n)> >(1)>)<


fish factorial

  >(n)>
  >(
      fish fact_st

        >(n)>
        >(prod)>
        <(
          trout >(n)>
          >(
            trout >(prod)>
            >(
              fin
                >(<= >(n)> >(0)>)>
                >(prod)>
                >(
                  fact_st >(- >(n)> >(1)>)> >(* >(prod)> >(n)>)>
                )>
            )>
          )>
        )<
  )>

  <(fact_st >(n)> >(1)>)<

fish prompt_input
  >(prompt)>
  <(trout >(prompt)> >(dolphin >()>)>)<


*/
fish proc
  >(x)>
  >(z)>
  >(trout >("YEEEHAW")> )>
  >(y <(+ >(x)> >(1)>)<)>
  <(
    +
    >(y)>
    >(z)>
  )<

/*Should return 10*/
swim 
/*This keyword denotes where the main execution block is
Send fish can be executed procedurally like -> 
>(a)> >(b)> == a >> b as a Haskell analogue
>(x <(y)<)> is a binding and, in haskell, will just return a new EnvironmentStack
*/
>(trout >("Now you can do some procedural coding in Sakana!")>)>
>(trout >("Anything you want to calculate and ignore, just wrap in a send fish")>)>
>(trout >("Any execution scope will return what the first return fish is")>)>
>(trout >("You can bind values to a scope using the below syntax: >(id <(value)< )>")>)>
>(x <(100)<)>
>(trout >("Now the id 'x' is bound to the scope below it with a value of 100")>)>
>(trout >("Now, this program will return the value of 'x'")>)>
<(x)<
>(trout >("Any value below a return fish in an execution scope will be ignored.")>)>

